@page "/fetchdata"
@attribute [Authorize]
@using System.Security.Claims

<PageTitle>User Profile</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello, @context.User.Identity.Name!</h1>
        <p>This component demonstrates fetching data for an authenticated user.</p>

        @if (userClaims != null)
        {
            <div class="card mt-4">
                <div class="card-header">
                    Your Claims
                </div>
                <ul class="list-group list-group-flush">
                    @foreach (var claim in userClaims)
                    {
                        <li class="list-group-item">
                            <strong>@claim.Type:</strong> @claim.Value
                        </li>
                    }
                </ul>
            </div>
        }
        else
        {
            <p><em>Loading claims...</em></p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You must be logged in to see this page.</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private IEnumerable<Claim> userClaims;

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userClaims = user.Claims;
        }
    }
}